% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tmle3_Task.R
\docType{class}
\name{tmle3_Task}
\alias{tmle3_Task}
\alias{make_tmle3_Task}
\title{Class for Storing Data and NPSEM for TMLE}
\format{\code{\link{R6Class}} object.}
\usage{
make_tmle3_Task(...)
}
\arguments{
\item{...}{Passes all arguments to the constructor. See documentation for the
Constructor below.}
}
\value{
\code{tmle3_Task} object
}
\description{
This class inherits from \code{\link[sl3]{sl3_Task}}. In addition to all the
 methods supported by \code{\link[sl3]{sl3_Task}}, it supports the following.
}
\section{Constructor}{

  \code{make_tmle3_task(data, npsem, ...)}
                     
  \describe{
    \item{\code{data}}{A \code{data.frame} or \code{data.table} containing the underlying data
    }
    \item{\code{npsem}}{A list of \code{\link{tmle3_Node}} objects, where each is created using \code{\link{define_node}}. These specify the NPSEM. See examples.
    }
    \item{\code{...}}{Other arguments passed to the constructor of \code{\link[sl3]{sl3_Task}}. \strong{NB:} Support for these is currently limited.
    }
    }
}

\section{Methods}{


\describe{
\item{\code{get_tmle_node(node_name, bound = FALSE)}}{
  Gets the data associated with a tmle_node. Bounds the data if requested.

  \itemize{
    \item{\code{node_name}: character, the name of the node to get.
    }
    \item{\code{bound}: logical, if true the data is transformed to be in (0,1) based on pre-specified bounds.
    }
  }
  }
  
\item{\code{get_regression_task(target_node, bound = FALSE)}}{
  Gets a \code{\link[sl3]{sl3_Task}} suitable for fitting the conditional likelihood factor with the \code{target_node}
  as the outcome.

  \itemize{
    \item{\code{target_node}: character, the name of the node to get.
    }
  }
  }
\item{\code{generate_counterfacutal_task(uuid, new_data)}}{
  Generates a new \code{tmle_Task} where some nodes are overridden to have counterfactual values.

  \itemize{
    \item{\code{uuid}: A unique identifier for the counterfactual task, as generated by \code{\link[uuid]{UUIDgenerate}}
    \item{\code{new_data}: A \code{data.frame} or \code{data.table} with the counterfactual values. Column names must refer to node names in the \code{npsem} for this task.
    }
  }
  }
}
}
}

\section{Fields}{

\describe{
  \item{\code{npsem}}{The list of \code{\link{tmle3_Node}} objects specifying the NPSEM}
}
}

\keyword{data}
\section{Super class}{
\code{\link[sl3:sl3_Task]{sl3::sl3_Task}} -> \code{tmle3_Task}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{tmle3_Task$new()}}
\item \href{#method-get_tmle_node}{\code{tmle3_Task$get_tmle_node()}}
\item \href{#method-get_regression_task}{\code{tmle3_Task$get_regression_task()}}
\item \href{#method-generate_counterfactual_task}{\code{tmle3_Task$generate_counterfactual_task()}}
\item \href{#method-next_in_chain}{\code{tmle3_Task$next_in_chain()}}
\item \href{#method-print}{\code{tmle3_Task$print()}}
\item \href{#method-get_node_bounds}{\code{tmle3_Task$get_node_bounds()}}
\item \href{#method-scale}{\code{tmle3_Task$scale()}}
\item \href{#method-unscale}{\code{tmle3_Task$unscale()}}
\item \href{#method-subset_task}{\code{tmle3_Task$subset_task()}}
\item \href{#method-clone}{\code{tmle3_Task$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="sl3" data-topic="sl3_Task" data-id="add_columns">}\href{../../sl3/html/sl3_Task.html#method-add_columns}{\code{sl3::sl3_Task$add_columns()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sl3" data-topic="sl3_Task" data-id="add_interactions">}\href{../../sl3/html/sl3_Task.html#method-add_interactions}{\code{sl3::sl3_Task$add_interactions()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sl3" data-topic="sl3_Task" data-id="get_data">}\href{../../sl3/html/sl3_Task.html#method-get_data}{\code{sl3::sl3_Task$get_data()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sl3" data-topic="sl3_Task" data-id="get_node">}\href{../../sl3/html/sl3_Task.html#method-get_node}{\code{sl3::sl3_Task$get_node()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sl3" data-topic="sl3_Task" data-id="has_node">}\href{../../sl3/html/sl3_Task.html#method-has_node}{\code{sl3::sl3_Task$has_node()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sl3" data-topic="sl3_Task" data-id="offset_transformed">}\href{../../sl3/html/sl3_Task.html#method-offset_transformed}{\code{sl3::sl3_Task$offset_transformed()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sl3" data-topic="sl3_Task" data-id="revere_fold_task">}\href{../../sl3/html/sl3_Task.html#method-revere_fold_task}{\code{sl3::sl3_Task$revere_fold_task()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{tmle3_Task$new(data, npsem, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_tmle_node"></a>}}
\subsection{Method \code{get_tmle_node()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{tmle3_Task$get_tmle_node(node_name, format = FALSE, impute_censoring = FALSE)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_regression_task"></a>}}
\subsection{Method \code{get_regression_task()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{tmle3_Task$get_regression_task(
  target_node,
  scale = FALSE,
  drop_censored = FALSE
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-generate_counterfactual_task"></a>}}
\subsection{Method \code{generate_counterfactual_task()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{tmle3_Task$generate_counterfactual_task(uuid, new_data)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-next_in_chain"></a>}}
\subsection{Method \code{next_in_chain()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{tmle3_Task$next_in_chain(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\subsection{Method \code{print()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{tmle3_Task$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_node_bounds"></a>}}
\subsection{Method \code{get_node_bounds()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{tmle3_Task$get_node_bounds(node)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-scale"></a>}}
\subsection{Method \code{scale()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{tmle3_Task$scale(x, node)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-unscale"></a>}}
\subsection{Method \code{unscale()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{tmle3_Task$unscale(x_scaled, node)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-subset_task"></a>}}
\subsection{Method \code{subset_task()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{tmle3_Task$subset_task(row_index, drop_folds = FALSE)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{tmle3_Task$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
